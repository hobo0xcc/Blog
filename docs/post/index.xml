<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0xb109</title>
    <link>https://hobo0xcc.github.io/Blog/post/</link>
    <description>Recent content in Posts on 0xb109</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>Copyright (c) 2020, all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 Jan 2021 17:14:09 +0900</lastBuildDate><atom:link href="https://hobo0xcc.github.io/Blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>にき 20/01/11</title>
      <link>https://hobo0xcc.github.io/Blog/post/diary-2021-01-11/</link>
      <pubDate>Mon, 11 Jan 2021 17:14:09 +0900</pubDate>
      
      <guid>https://hobo0xcc.github.io/Blog/post/diary-2021-01-11/</guid>
      <description>自然な談話が、ある情念や感銘を描く場合、人は自分が聞いていることの真実、すなわち、前から自分のうちにあったのだが、そうとは知らずにいた真実を発見し、そこからそれを感じさせてくれた人を愛好するようになる。なぜなら、その人はわれわれにその人のよいものを示したのでなく、われわれのよいものを示してくれたのだから。このようにして、われわれとかれとのこの知的一致がかれを愛好する心を必然的におこさせるだけでなく、この好意がわれわれにかれを愛好させるのである。
Blaise Pascal (1669). Pensées (B.パスカル 由木康(訳) (1990). パンセ 白水社 pp.18-19)
 誰もが知っているような普遍的真実、感覚、情景をあえて文章にして表現する。歌、詩、随筆。
 真の科学に特徴的なのは、それが無用な物事の研究だということである。なぜなら有用な物事は、科学に従事する人間が関わらずとも研究されるであろうから。科学者という稀有な心の持ち主を有用な物事の研究に従事させるのは、ダイアモンドを燃やして蒸気機関を動かすようなものだ。
C.S. Peirce
  われわれの本性は、運動にある。完全な休止は死である。
もしも兵士か労働者が、自分の労苦について不平を言ったら、なにもさせずにおくがよい。
Blaise Pascal (1669). Pensées (B.パスカル 由木康(訳) (1990). パンセ 白水社 p.62)
 歳を取るにつれて、変化を好まなくなる。死が近づいているからか？
 われわれは事物を、ちがった面から見るだけでなく、べつの目で見る。それらを同様に見ようとしない。
Blaise Pascal (1669). Pensées (B.パスカル 由木康(訳) (1990). パンセ 白水社 p.62)
  ある著者たちは自分の著作のことを「わたしの本、わたしの注解、わたしの物語、等々」と言う。かれらは自分の家に住んで、しじゅう「自宅では」を口にする町人根性を脱していない。むしろ「われわれの本、われわれの注解、われわれの物語、等々」と言うべきである。その理由は、ふつうそれらのうちには、かれら自身のものよりも他人のものがいっそう多く入っているからだ。
Blaise Pascal (1669). Pensées (B.パスカル 由木康(訳) (1990). パンセ 白水社 p.62)
 一人で学んだが、独りで学んでいない。謙虚さ。
 我々は知らねばならない、我々は知るであろう。
D.ヒルベルト
 学問である。
 頭のよい人は、あまりに多く頭の力を過信する恐れがある。その結果として、自然がわれわれに表示する現象が自分の頭で考えたことと一致しない場合に、「自然のほうが間違っている」かのように考える恐れがある。
寺田寅彦 科学者とあたま</description>
    </item>
    
    <item>
      <title>型推論の実装</title>
      <link>https://hobo0xcc.github.io/Blog/post/type_inference_hm-2020-06-14/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hobo0xcc.github.io/Blog/post/type_inference_hm-2020-06-14/</guid>
      <description>この記事では、主に型推論の実装方法について書いていきます。 理論的な側面は必要最低限に留めますので、詳しく知りたい方は参考文献を参照してください。
型推論とは何か 型推論とは何かについて軽く説明しておきましょう。
型推論とは、プログラムの変数や引数などの型を、明示的な指定がなくても自動的に推論し、決定する機構のことです。 たとえば、以下のようなOCamlプログラムを考えてみましょう。
let f x y = x + y;; このプログラムはxとyを引数として、それらの和を返しています。OCamlのREPLで実行してみると、この関数は引数として整数を2つ持ち、整数を返す関数として定義されます。 xとyには何も型を指定していないのに、整数であると決定されるわけです。
val f : int -&amp;gt; int -&amp;gt; int = &amp;lt;fun&amp;gt; このように、型推論は型を周辺状況や文脈などから決定してくれます。
上記の例では、+演算子が左辺と右辺に整数をとり、整数を返す、という情報から関数の型を推論しています。このような単純な型推論は比較的簡単に実装できるでしょう。
今度は少し複雑な例を考えてみましょう。
let a x y z = if x == 2 then y else z(x - 1) この関数は以下の型を持ちます。
val a : int -&amp;gt; &amp;#39;a -&amp;gt; (int -&amp;gt; &amp;#39;a) -&amp;gt; &amp;#39;a = &amp;lt;fun&amp;gt; 整数、任意の型x、引数として整数を持ち、任意の型xを返す関数、これらを引数として、任意の型xを返す関数、という型を持っています。
それぞれの引数について、なぜその型を持つのかについて説明します。
xは整数型を持っています。これは、x == 2の部分から推論されています。==演算子は左辺と右辺に同じ型をとるので、右辺の2と同じ型を持っていなくてはなりません。このことから、xは整数型を持つことがわかります。
yは任意の型xを持っています。これは、型推論で型が特に決定されなかったことを意味しています。あとで説明しますが、これは、型変数が置き換わらなかった場合です。
zは引数として整数型を持ち、任意の型xを返します。引数に整数型を持つのは、先ほどの例と同様に、x - 1が整数型を持つためです。では、任意の型を返すのは何故でしょうか。これは、If文の制約に関係しています。If文は条件式に真偽型を持ち、thenとelseの部分で同じ型を持つようになっています。そのため、zが返す型はyと同じ任意の型xになります。
型推論を人力で行おうとすると、このような感じになります。</description>
    </item>
    
    <item>
      <title>hello</title>
      <link>https://hobo0xcc.github.io/Blog/post/hello/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hobo0xcc.github.io/Blog/post/hello/</guid>
      <description>Hello, world! こんにちは世界!
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;Hello, world!&amp;#34; &amp;lt;&amp;lt; endl; return 0; } $ e^{i\pi} = -1 $</description>
    </item>
    
  </channel>
</rss>
